{"version":3,"sources":["utils.js","index.js"],"names":["PRNG","seed","_current","x","Math","sin","floor","low","up","range","inRange","random","array","num","seen","Set","choices","i","choice","randInt","length","has","add","push","Vector","y","otherVector","scalar","sqrt","pow","makeVector","makeRandomVector","prng","copy","o","JSON","parse","stringify","module","exports","canvas","ctx","running","graph","setup","Date","getTime","document","getElementById","width","height","getContext","makeGraph","requestAnimationFrame","draw","DOT_SIZE","step","fillStyle","fillRect","nodes","values","node","nodeX","pos","nodeY","beginPath","arc","PI","closePath","fill","lineWidth","vertices","vertex","nodeID","otherNodeID","get","otherNode","otherNodeX","otherNodeY","dist","distance","alpha","atan","strokeStyle","moveTo","lineTo","stroke","makeNode","id","vel","outgoingVerts","numConnections","numNodes","utils","subVector","multScalar","indexedNodes","Map","set","actualNum","connectedNodes","filteredVerts","filter","a","b","newNodes","newNode","addVector","newVertices"],"mappings":"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","file":"flownet.9bc4e7b8.map","sourceRoot":"..","sourcesContent":["class PRNG {\n  constructor(seed) {\n    this.seed = seed\n    this._current = seed\n  }\n\n  random() {\n    this._current++\n    const x = Math.sin(this._current) * 10000\n    return x - Math.floor(x)\n  }\n\n  randInt(low, up) {\n    const range = up - low\n    const inRange = Math.floor(this.random() * range + 1)\n    return inRange + low\n  }\n\n  choices(array, num = 1) {\n    const seen = new Set()\n    const choices = []\n\n    for (let i = 0; i < num; i++) {\n      let choice\n      while (true) {\n        const choiceIndex = this.randInt(0, array.length - 1)\n        choice = array[choiceIndex]\n        if (!seen.has(choice)) {\n          seen.add(choice)\n          break\n        }\n      }\n      choices.push(choice)\n    }\n\n    return choices\n  }\n}\n\nclass Vector {\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n  }\n\n  addVector(otherVector) {\n    return new Vector(this.x + otherVector.x, this.y + otherVector.y)\n  }\n\n  subVector(otherVector) {\n    return new Vector(this.x - otherVector.x, this.y - otherVector.y)\n  }\n\n  multScalar(scalar) {\n    return new Vector(this.x * scalar, this.y * scalar)\n  }\n\n  distance(otherVector) {\n    return Math.sqrt(\n      Math.pow(this.x - otherVector.x, 2) + Math.pow(this.y - otherVector.y, 2)\n    )\n  }\n}\n\nconst makeVector = (x, y) => new Vector(x, y)\nconst makeRandomVector = prng => makeVector(prng.random(), prng.random())\n\nconst copy = o => JSON.parse(JSON.stringify(o))\n\nmodule.exports = { PRNG, makeVector, makeRandomVector, copy }\n","import utils from './utils'\n\nlet canvas\nlet ctx\nlet running\nlet graph\n\nfunction setup() {\n  let seed = new Date().getTime()\n  const numNodes = 80\n\n  canvas = document.getElementById('stage')\n  canvas.width = 500\n  canvas.height = 500\n\n  ctx = canvas.getContext('2d')\n  running = true\n\n  graph = makeGraph(numNodes, seed)\n\n  requestAnimationFrame(draw)\n}\n\nconst DOT_SIZE = 1.5\n\nfunction draw() {\n  graph = step(graph)\n\n  ctx.fillStyle = '#185d7e'\n  ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n  ctx.fillStyle = 'white'\n  for (const node of graph.nodes.values()) {\n    const nodeX = canvas.width * node.pos.x\n    const nodeY = canvas.height * node.pos.y\n\n    ctx.beginPath()\n    ctx.arc(nodeX, nodeY, DOT_SIZE, 0, 2 * Math.PI, true)\n    ctx.closePath()\n    ctx.fill()\n  }\n\n  ctx.lineWidth = '0.1px'\n  for (const vertex of graph.vertices) {\n    const [nodeID, otherNodeID] = vertex\n    const node = graph.nodes.get(nodeID)\n    const otherNode = graph.nodes.get(otherNodeID)\n\n    const nodeX = canvas.width * node.pos.x\n    const nodeY = canvas.height * node.pos.y\n    const otherNodeX = canvas.width * otherNode.pos.x\n    const otherNodeY = canvas.height * otherNode.pos.y\n\n    const thresh = 0.2\n    const dist = node.pos.distance(otherNode.pos)\n    const cappedDist = dist > thresh ? thresh : dist\n    const normDist = (cappedDist / thresh) * 1\n    let alpha = 1 - normDist\n    alpha = Math.atan(1.57 * alpha) / 3\n    ctx.strokeStyle = `rgba(255, 255, 255, ${alpha})`\n    ctx.beginPath()\n    ctx.moveTo(nodeX, nodeY)\n    ctx.lineTo(otherNodeX, otherNodeY)\n    ctx.closePath()\n    ctx.stroke()\n  }\n\n  if (running) {\n    requestAnimationFrame(draw)\n  }\n}\n\nconst makeNode = ({ id, pos, vel, outgoingVerts = [] }) => {\n  return { id, pos, vel, outgoingVerts }\n}\n\nconst numConnections = 2\nconst makeGraph = (numNodes, seed) => {\n  const prng = new utils.PRNG(seed)\n\n  const nodes = []\n  for (let i = 0; i < numNodes; i++) {\n    const vel = utils\n      .makeRandomVector(prng)\n      .subVector(utils.makeVector(0.5, 0.5))\n      .multScalar(0.001)\n    nodes.push(\n      makeNode({\n        id: i,\n        pos: utils.makeRandomVector(prng),\n        vel: vel\n      })\n    )\n  }\n  const indexedNodes = new Map()\n  for (const node of nodes) {\n    indexedNodes.set(node.id, node)\n  }\n\n  const vertices = []\n  for (const node of nodes) {\n    const actualNum = prng.randInt(0, numConnections)\n    const connectedNodes = prng.choices(nodes, actualNum)\n    for (const otherNode of connectedNodes) {\n      vertices.push([node.id, otherNode.id])\n    }\n  }\n  const filteredVerts = vertices\n    .filter(([a, b]) => a !== b)\n    .filter(\n      ([a, b]) =>\n        indexedNodes.get(a).pos.distance(indexedNodes.get(b).pos) < 0.4\n    )\n\n  return { nodes: indexedNodes, vertices: filteredVerts }\n}\n\nconst step = graph => {\n  const newNodes = new Map()\n  for (const node of graph.nodes.values()) {\n    const newNode = makeNode(node)\n    newNode.pos = newNode.pos.addVector(newNode.vel)\n    if (newNode.pos.x < -0.2) newNode.pos.x = 1.2\n    if (newNode.pos.x > 1.2) newNode.pos.x = -0.2\n    if (newNode.pos.y < -0.2) newNode.pos.y = 1.2\n    if (newNode.pos.y > 1.2) newNode.pos.y = -0.2\n    newNodes.set(newNode.id, newNode)\n  }\n\n  const newVertices = []\n  for (const node of newNodes.values()) {\n    for (const otherNode of newNodes.values()) {\n      if (node === otherNode) {\n        continue\n      }\n      if (node.pos.distance(otherNode.pos) < 0.2) {\n        newVertices.push([node.id, otherNode.id])\n      }\n    }\n  }\n\n  return {\n    nodes: newNodes,\n    vertices: newVertices\n  }\n}\n\nsetup()\n"]}